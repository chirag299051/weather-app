{"version":3,"sources":["logo.svg","context.js","Search.js","Card.js","Weather.js","NewsItem.js","News.js","assets/globe.png","Header.js","App.js","reportWebVitals.js","index.js"],"names":["MAPS_KEY","context","React","createContext","AppProvider","children","useState","theme","setTheme","loading","setLoading","location","setLocation","timezone","setTimezone","weather","setWeather","news","setNews","error","setError","fetchLocation","navigator","geolocation","console","log","getCurrentPosition","position","lat","coords","latitude","lon","longitude","fetch","then","res","json","result","city","name","country","sys","err","warn","code","message","useEffect","a","Math","floor","Date","now","response","timeZoneId","dt","main","temp","feels_like","temp_min","temp_max","pressure","humidity","wind","speed","clouds","all","sunrise","sunset","id","weatherc","catch","icon","slice","filter","x","language","image","author","Provider","value","getCoords","addr","results","address_components","some","types","includes","long_name","geometry","lng","short_name","Search","places","useRef","useContext","setValue","className","ref","apiKey","selectProps","defaultInputValue","placeholder","onChange","val","structured_formatting","main_text","description","Card","props","classes","Weather","getTime","date","toLocaleString","timeZone","hour","minute","format","ticking","src","alt","parseInt","toFixed","NewsItem","item","href","url","target","title","News","map","index","Header","myRef","vantaEffect","setVantaEffect","destroy","CLOUDS","el","current","THREE","mouseControls","touchControls","gyroControls","minHeight","minWidth","backgroundColor","skyColor","cloudColor","cloudShadowColor","sunColor","sunGlareColor","sunlightColor","globe","style","color","memo","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b536ce8c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from \"react\";\n\nconst lURL = \"https://geolocation-db.com/json/\";\nconst wURL = \"https://api.openweathermap.org/data/2.5/weather?lat=\";\nconst wKEY = \"706c875644ce262a11af9eaf5a62df90\";\nconst nURL = \"https://api.currentsapi.services/v1/search?language=en&country=\";\nconst nKEY = \"oa9AFhpH80Xey9PNXgPTwZWkQUfBP4yY5iaHKaD6klhgkK9_\";\n\nconst MAPS_KEY = \"AIzaSyAobzmD0pf_jnvXCycI0bUYsBRJlL4ZEvw\";\nexport const context = React.createContext();\n\nexport const AppProvider = ({ children }) => {\n  const [theme, setTheme] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [location, setLocation] = useState({});\n  const [timezone, setTimezone] = useState(null);\n  const [weather, setWeather] = useState(null);\n  const [news, setNews] = useState(null);\n  const [error, setError] = useState(false);\n\n  // const fetchLocation = async () => {\n  //   const resp = await fetch(lURL);\n  //   const result = await resp.json();\n  //   setLocation({\n  //     ...location,\n  //     city: result.city,\n  //     lat: result.latitude,\n  //     lon: result.longitude,\n  //     country: result.country_code,\n  //   });\n\n  //   console.log(\"Geo :\", result);\n  // };\n\n  const fetchLocation = () => {\n    function error(err) {\n      console.warn(`ERROR(${err.code}): ${err.message}`);\n    }\n\n    if (navigator.geolocation) {\n      console.log(\"navigator.geolocation is available\");\n      navigator.geolocation.getCurrentPosition(function (position) {\n        console.log(\"current position acquired\");\n        var lat = position.coords.latitude;\n        var lon = position.coords.longitude;\n        console.log(lat, lon);\n        fetch(\n          `https://fcc-weather-api.glitch.me/api/current?lon=${lon}&lat=${lat}`\n        )\n          .then((res) => res.json())\n          .then((result) =>\n            setLocation({\n              lat,\n              lon,\n              city: result.name,\n              country: result.sys.country,\n            })\n          );\n      }, error);\n    }\n  };\n\n  useEffect(() => {\n    fetchLocation();\n  }, []);\n\n  const getCoords = (addr) => {\n    fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${addr}&key=${MAPS_KEY}\n  `)\n      .then((response) => response.json())\n      .then((result) => {\n        console.log(\"Coords :\", result);\n        if (\n          result.results[0].address_components.some((x) =>\n            x.types.includes(\"locality\")\n          )\n        ) {\n          setLocation({\n            ...location,\n            city: result.results[0].address_components.filter((x) =>\n              x.types.includes(\"locality\")\n            )[0].long_name,\n            lat: result.results[0].geometry.location.lat,\n            lon: result.results[0].geometry.location.lng,\n            country: result.results[0].address_components.filter((x) =>\n              x.types.includes(\"country\")\n            )[0].short_name,\n          });\n          //   setError(false);\n        } else {\n          setError(true);\n          console.log(\"error: \", error);\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  useEffect(async () => {\n    fetchLocation();\n  }, [lURL]);\n\n  useEffect(() => {\n    setLoading(true);\n    location.lat &&\n      fetch(\n        `https://maps.googleapis.com/maps/api/timezone/json?location=${\n          location.lat\n        },${location.lon}&timestamp=${Math.floor(\n          Date.now() / 1000\n        )}&key=${MAPS_KEY}`\n      )\n        .then((response) => response.json())\n        .then((result) => {\n          console.log(\"Timezone :\", result);\n          setTimezone(result.timeZoneId);\n        });\n\n    location.lat &&\n      fetch(\n        `${wURL}${location.lat}&lon=${location.lon}&appid=${wKEY}&units=metric`\n      )\n        .then((response) => response.json())\n        .then((result) => {\n          console.log(\"Weather :\", result);\n          const {\n            dt,\n            weather,\n            main: { temp, feels_like, temp_min, temp_max, pressure, humidity },\n            wind: { speed: wind },\n            clouds: { all: clouds },\n            sys: { country, sunrise, sunset },\n            id,\n          } = result;\n          setWeather({\n            dt,\n            weatherc: weather[0],\n            temp,\n            feels_like,\n            temp_min,\n            temp_max,\n            pressure,\n            humidity,\n            wind,\n            clouds,\n            country,\n            sunrise,\n            sunset,\n            id,\n          });\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    setLoading(false);\n  }, [location]);\n  console.log(weather && weather);\n  console.log(timezone);\n\n  useEffect(() => {\n    setTheme(weather && weather.weatherc.icon.slice(-1));\n  }, [weather]);\n\n  useEffect(() => {\n    location.country &&\n      fetch(`${nURL}${location.country}&apiKey=${nKEY}`)\n        .then((response) => response.json())\n        .then((result) => {\n          console.log(\"News :\", result);\n          setNews(\n            result.news.filter(\n              (x) =>\n                x.language === \"en\" &&\n                x.language !== \"zh-hant\" &&\n                x.image !== \"None\" &&\n                x.author !== \"\"\n            )\n          );\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n  }, [location]);\n\n  return (\n    <context.Provider\n      value={{\n        theme,\n        loading,\n        location,\n        fetchLocation,\n        getCoords,\n        weather,\n        timezone,\n        news,\n      }}\n    >\n      {children}\n    </context.Provider>\n  );\n};\n","import React, { useState, useContext, useEffect, useRef } from \"react\";\nimport { context } from \"./context\";\nimport GooglePlacesAutocomplete from \"react-google-places-autocomplete\";\n\nconst Search = () => {\n  const places = useRef();\n  const { location, getCoords } = useContext(context);\n  const [value, setValue] = useState(\"\");\n\n  useEffect(() => {\n    console.log(\"places\", places);\n    console.log(location);\n    setValue(location.city);\n    return () => {\n      setValue(\"\");\n    };\n  }, [location]);\n  return (\n    <div className=\"search\">\n      <GooglePlacesAutocomplete\n        ref={places}\n        apiKey=\"AIzaSyChD_ozQm2jhcWsqNgX3iSW1kMZjdGIbx4\"\n        selectProps={{\n          defaultInputValue: value,\n          placeholder: \"City\",\n          onChange: (val) => {\n            console.log(val);\n            setValue(val.value.structured_formatting.main_text);\n            getCoords(val.value.description);\n            console.log(location);\n            console.log(\"getCoords: \", val.value.description);\n          },\n        }}\n      />\n    </div>\n  );\n};\nexport default Search;\n","import React from \"react\";\n\nconst Card = (props) => {\n  const classes = \"Card \" + props.className;\n  return <div className={classes}>{props.children}</div>;\n};\n\nexport default Card;\n","import React, { useContext } from \"react\";\nimport { context } from \"./context\";\nimport Clock from \"react-live-clock\";\nimport Card from \"./Card\";\n\nconst Weather = () => {\n  const { theme, weather, location, timezone } = useContext(context);\n  const getTime = (date, timezone) => {\n    return new Date(date * 1000).toLocaleString(\"en-GB\", {\n      timeZone: timezone,\n      hour: \"numeric\",\n      minute: \"numeric\",\n    });\n  };\n  return weather && timezone ? (\n    <Card className={theme + \" weather\"}>\n      <div>\n        <h1>\n          {location.city}, {location.country}\n        </h1>\n      </div>\n      <div className=\"clocks\">\n        <Clock format={\"DD MMMM YYYY\"} ticking={true} timezone={timezone} />\n        <br />\n        <Clock\n          className=\"time\"\n          format={\"HH:mm:ss\"}\n          ticking={true}\n          timezone={timezone}\n        />\n      </div>\n      <h3>\n        <i>{weather.weatherc.main}</i>\n      </h3>\n      <div>\n        <img\n          src={`http://openweathermap.org/img/wn/${weather.weatherc.icon}@2x.png`}\n          alt=\"image\"\n        />\n        <b>\n          <i>{parseInt(weather.temp).toFixed(1)}&deg; C&emsp;&emsp;</i>\n        </b>\n        <i>feels like {parseInt(weather.feels_like).toFixed(1)}&deg; C</i>\n        <ul>\n          <li>\n            <i>\n              {parseInt(weather.temp_max).toFixed(1)}&nbsp;/&nbsp;\n              {parseInt(weather.temp_min).toFixed(1)}\n            </i>\n          </li>\n          <li>\n            <i>Sunrise: &nbsp;{getTime(weather.sunrise, timezone)}</i>\n          </li>\n          <li>\n            <i>Sunset: &nbsp;{getTime(weather.sunset, timezone)}</i>\n          </li>\n          <li>\n            <i>Wind: &nbsp;{parseInt(weather.wind).toFixed(1)} km/h</i>\n          </li>\n          <li>\n            <i>Humidity: &nbsp;{weather.humidity} %</i>\n          </li>\n        </ul>\n      </div>\n    </Card>\n  ) : null;\n};\n\nexport default Weather;\n","import React from \"react\";\n\nconst NewsItem = ({ item }) => {\n  return (\n    <a className=\"news-item\" href={item.url} target=\"_blank\">\n      <img src={item.image} alt=\"No Image\" />\n      <p>{item.title}</p>\n    </a>\n  );\n};\n\nexport default NewsItem;\n","import React, { useContext } from \"react\";\nimport { context } from \"./context\";\nimport NewsItem from \"./NewsItem\";\nimport Card from \"./Card\";\n\nconst News = () => {\n  const { theme, news } = useContext(context);\n  return (\n    <>\n      <div className={\"news\"}>\n        <h1>Current News</h1>\n\n        <div className=\"news-items\">\n          {news &&\n            news.map((item, index) => <NewsItem key={index} item={item} />)}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default News;\n","export default __webpack_public_path__ + \"static/media/globe.e40c5193.png\";","import React, { useState, useEffect, useRef, useContext } from \"react\";\nimport * as THREE from \"three\";\nimport CLOUDS from \"vanta/dist/vanta.clouds.min\";\nimport Search from \"./Search\";\nimport { context } from \"./context\";\nimport Weather from \"./Weather\";\nimport News from \"./News\";\nimport globe from \"./assets/globe.png\";\n\nconst Header = (props) => {\n  const myRef = useRef(null);\n  const [vantaEffect, setVantaEffect] = useState(0);\n  const { theme } = useContext(context);\n\n  useEffect(() => {\n    console.log(theme);\n    if (theme === \"d\") {\n      if (vantaEffect) vantaEffect.destroy();\n      setVantaEffect(\n        CLOUDS({\n          el: myRef.current,\n          THREE: THREE,\n          mouseControls: true,\n          touchControls: true,\n          gyroControls: false,\n          minHeight: 600.0,\n          minWidth: 200.0,\n          // scale: 1.0,\n          // scaleMobile: 1.0,\n          backgroundColor: 0x0,\n        })\n      );\n    } else if (theme === \"n\") {\n      if (vantaEffect) vantaEffect.destroy();\n      setVantaEffect(\n        CLOUDS({\n          el: myRef.current,\n          THREE: THREE,\n          mouseControls: true,\n          touchControls: true,\n          gyroControls: false,\n          minHeight: 600.0,\n          minWidth: 200.0,\n          skyColor: 0x2020c,\n          cloudColor: 0x6a7c9b,\n          cloudShadowColor: 0x8111b,\n          sunColor: 0xfafafa,\n          sunGlareColor: 0xffffff,\n          sunlightColor: 0xf5f5f5,\n          // scaleMobile: 1.0,\n        })\n      );\n    }\n    return () => {\n      if (vantaEffect) vantaEffect.destroy();\n    };\n  }, [theme]);\n  return (\n    <div ref={myRef} className=\"header\">\n      <div className=\"logo\">\n        <img src={globe} alt=\"\" />\n        <h2 style={{ color: \"white\" }}>Weather App</h2>\n      </div>\n      <Search />\n      <Weather />\n      <News />\n    </div>\n  );\n};\n\nexport default React.memo(Header);\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport React from \"react\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      {/* <Footer /> */}\n    </div>\n  );\n}\n\nexport default React.memo(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport { AppProvider } from \"./context\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}